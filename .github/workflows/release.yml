name: 🚀 自动化发布流程

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'package.json'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      release-type:
        description: '发布类型'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      skip-tests:
        description: '跳过测试'
        required: false
        default: false
        type: boolean

jobs:
  # 检查是否需要发布
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      current-version: ${{ steps.check.outputs.current-version }}
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 检查是否需要发布
        id: check
        run: |
          # 检查最后一次提交是否为发布提交
          last_commit_msg=$(git log -1 --pretty=%B)
          current_version=$(node -p "require('./package.json').version")
          
          echo "current-version=$current_version" >> $GITHUB_OUTPUT
          
          if [[ "$last_commit_msg" == *"chore: release"* ]] && [[ "${{ github.event_name }}" == "push" ]]; then
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "⏭️ 跳过发布：检测到发布提交"
          else
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "✅ 准备发布流程"
          fi

  # 代码质量检查和测试
  quality-check:
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should-release == 'true'
    outputs:
      coverage-percentage: ${{ steps.coverage.outputs.percentage }}
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: TypeScript类型检查
        run: npm run type-check

      - name: ESLint代码检查
        run: npm run lint

      - name: 构建项目
        run: npm run build

      - name: 运行代码覆盖率测试
        run: npm run test:coverage

      - name: 计算覆盖率百分比
        id: coverage
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            coverage=$(node -p "Math.round(require('./coverage/coverage-summary.json').total.lines.pct)")
            echo "percentage=$coverage" >> $GITHUB_OUTPUT
            echo "📊 代码覆盖率: $coverage%"
          else
            echo "percentage=0" >> $GITHUB_OUTPUT
            echo "⚠️ 未生成覆盖率报告"
          fi

      - name: 上传覆盖率报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: |
            coverage/
            test-report.json

      - name: 运行自动化测试
        if: ${{ !inputs.skip-tests }}
        run: npm run test:automation

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  # 发布流程
  release:
    runs-on: ubuntu-latest
    needs: [check-release, quality-check]
    if: needs.check-release.outputs.should-release == 'true'
    environment: production
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: 安装依赖
        run: npm ci

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: 配置Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: 确定发布类型
        id: release-type
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "type=${{ inputs.release-type }}" >> $GITHUB_OUTPUT
          else
            # 自动根据提交信息确定发布类型
            commits=$(git log --oneline $(git describe --tags --abbrev=0)..HEAD 2>/dev/null || git log --oneline)
            if echo "$commits" | grep -qE "^[a-f0-9]+ (feat|feature)"; then
              echo "type=minor" >> $GITHUB_OUTPUT
            elif echo "$commits" | grep -qE "^[a-f0-9]+ BREAKING CHANGE|^[a-f0-9]+ .*!:"; then
              echo "type=major" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: 执行发布
        run: |
          npm run release -- --${{ steps.release-type.outputs.type }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 获取新版本号
        id: new-version
        run: |
          new_version=$(node -p "require('./package.json').version")
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "🎉 新版本: $new_version"

      - name: 生成发布说明
        id: release-notes
        run: |
          # 获取上一个标签
          previous_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$previous_tag" ]; then
            # 生成提交日志
            echo "## 🔄 变更内容" > release-notes.md
            git log --oneline $previous_tag..HEAD --pretty=format:"- %s (%h)" >> release-notes.md
            echo "" >> release-notes.md
          else
            echo "## 🎉 首次发布" > release-notes.md
          fi
          
          # 添加覆盖率信息
          echo "## 📊 代码质量" >> release-notes.md
          echo "- 代码覆盖率: ${{ needs.quality-check.outputs.coverage-percentage }}%" >> release-notes.md
          echo "- 发布时间: $(date)" >> release-notes.md
          echo "" >> release-notes.md
          
          # 添加安装说明
          echo "## 📦 安装方式" >> release-notes.md
          echo "\`\`\`bash" >> release-notes.md
          echo "npm install fe-scaffold-mcp-server@${{ steps.new-version.outputs.version }}" >> release-notes.md
          echo "\`\`\`" >> release-notes.md

      - name: 创建GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new-version.outputs.version }}
          release_name: 🚀 Release v${{ steps.new-version.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: false

      - name: 发布成功通知
        if: success()
        run: |
          echo "🎉 发布成功！"
          echo "📦 包名: fe-scaffold-mcp-server"
          echo "🏷️ 版本: ${{ needs.check-release.outputs.current-version }} → ${{ steps.new-version.outputs.version }}"
          echo "📊 覆盖率: ${{ needs.quality-check.outputs.coverage-percentage }}%"
          echo "🌐 NPM: https://www.npmjs.com/package/fe-scaffold-mcp-server"

  # 发布后清理
  post-release:
    runs-on: ubuntu-latest
    needs: [release]
    if: always() && needs.release.result == 'success'
    steps:
      - name: 清理工作区artifacts
        uses: actions/github-script@v7
        with:
          script: |
            // 清理旧的artifacts
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            // 只保留最新的artifacts
            console.log(`清理 ${artifacts.data.artifacts.length} 个artifacts`);